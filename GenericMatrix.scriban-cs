{{
#rows
#columns

    TypeName = $"Matrix{rows}X{columns}"
    TypeNameT = TypeName + '<T>'
    DocName = TypeName + '{T}'

    xyzw = ["X", "Y", "Z", "W"]

    RowsNameT = $"Vector{{rows}}D<T>"
    ColumnsNameT = $"Vector{{columns}}D<T>"

    func forEachRowAndColumn(sep = null, newline = true, endingNewline = false)
        for x in 0..<rows
        for y in 0..<columns
            c = xyzw[x]
            cl = c | string.downcase
            $$
            if !for.last && sep != null
                sep
            end
            if newline && (endingNewline || !for.last)
                '\n'
            end
        end
        end
    end
}}
/// <summary>A structure encapsulating a {rows}x{columns matrix.</summary>
[Serializable, DataContract]
public readonly struct {{TypeNameT}} : IEquatable<{{TypeNameT}}>
    where T : INumberBase<T>
{
    {{~ for x in 0..<rows ~}}
    /// <summary>
    /// Row {{x+1}} of the matrix.
    /// </summary>
    [IgnoreDataMember]
    public readonly {{RowsNameT}} Row{{x+1}};
    {{~ end ~}}

    {{~ for x in 0..<rows ~}}
    /// <summary>
    /// Row {{x+1}} of the matrix.
    /// </summary>
    [IgnoreDataMember]
    public {{RowsNameT}} {{xyzw[x]}} => Row{{x+1}};
    {{~ end ~}}

    {{~ for y in 0..<columns ~}}
    /// <summary>
    /// Column {{y+1}} of the matrix.
    /// </summary>
    [IgnoreDataMember]
    public {{ColumnsNameT}} Column{{y+1}} => new(
        {{- for x in 0..<rows -}}
        M{{x}}{{y}} {{- if !for.last -}}, {{ end -}}
        {{- end -}}
    );
    {{~ end ~}}

    {{~ for x in 0..<rows ~}}
    {{~ for y in 0..<columns ~}}
    /// <summary>Value at row {{x+1}}, column {{y+1}} of the matrix.</summary>
    [DataMember]
    public T M{{x}}{{y}} => Row{{x+1}}.{{xyzw[y]}};
    {{~ end ~}}
    {{~ end ~}}

    internal const int RowCount = {{rows}};
    internal const int ColumnCount = {{columns}};

    public ReadOnlySpan<{{RowsNameT}}> Rows
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => MemoryMarshal.CreateReadOnlySpan<{{RowsNameT}}>(ref Unsafe.AsRef(in Row1), RowCount);
    }

    /// <summary>
    /// Indexer for the rows of this matrix.
    /// </summary>
    /// <param name="x">The row to select. Zero based.</param>
    public unsafe {{RowsNameT}} this[int x]
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => Rows[x];
    }

    /// <summary>
    /// Indexer for the cells in this matrix.
    /// </summary>
    /// <param name="x">The row to select. Zero based.</param>
    /// <param name="y">The column to select. Zero based.</param>
    public unsafe T this[int x, int y] => this[x][y];

    /// <summary>Constructs a <see cref="{{DocName}}"/> from the given components.</summary>
    public {{TypeName}}({{ wrap forEachRowAndColumn ', ' newline:false; $"T m{x}{y}"; end }})
    {
        Row1 = new(m11, m12);
        Row2 = new(m21, m22);
    }

    /// <summary>Constructs a <see cref="Matrix2X2{T}"/> from the given rows.</summary>
    public Matrix2X2(Vector2D<T> row1, Vector2D<T> row2)
    {
        Row1 = row1;
        Row2 = row2;
    }

    /// <summary>Constructs a <see cref="Matrix2X2{T}"/> from the given <see cref="Matrix3X2{T}"/>.</summary>
    /// <param name="value">The source <see cref="Matrix3X2{T}"/>.</param>
    public Matrix2X2(Matrix3X2<T> value)
    {
        Row1 = new(value.M11, value.M12);
        Row2 = new(value.M21, value.M22);
    }

    /// <summary>Constructs a <see cref="Matrix2X2{T}"/> from the given Matrix4x3.</summary>
    /// <param name="value">The source Matrix4x3.</param>
    public Matrix2X2(Matrix4X3<T> value)
    {
        Row1 = new(value.M11, value.M12);
        Row2 = new(value.M21, value.M22);
    }

    /// <summary>Constructs a <see cref="Matrix2X2{T}"/> from the given <see cref="Matrix3X4{T}"/>.</summary>
    /// <param name="value">The source <see cref="Matrix3X4{T}"/>.</param>
    public Matrix2X2(Matrix3X4<T> value)
    {
        Row1 = new(value.M11, value.M12);
        Row2 = new(value.M21, value.M22);
    }

    /// <summary>Constructs a <see cref="Matrix2X2{T}"/> from the given <see cref="Matrix2X4{T}"/>.</summary>
    /// <param name="value">The source <see cref="Matrix2X4{T}"/>.</param>
    public Matrix2X2(Matrix2X4<T> value)
    {
        Row1 = new(value.M11, value.M12);
        Row2 = new(value.M21, value.M22);
    }

    /// <summary>Constructs a <see cref="Matrix2X2{T}"/> from the given <see cref="Matrix4X2{T}"/>.</summary>
    /// <param name="value">The source <see cref="Matrix4X2{T}"/>.</param>
    public Matrix2X2(Matrix4X2<T> value)
    {
        Row1 = new(value.M11, value.M12);
        Row2 = new(value.M21, value.M22);
    }

    /// <summary>Returns the multiplicative identity matrix.</summary>
    public static Matrix2X2<T> Identity => _identity;

    /// <summary>Returns whether the matrix is the identity matrix.</summary>
    public readonly bool IsIdentity
        => Scalar.Equal(M11, Scalar<T>.One) &&
            Scalar.Equal(M22, Scalar<T>.One) && // Check diagonal element first for early out.
            Scalar.Equal(M12, Scalar<T>.Zero) && Scalar.Equal(M21, Scalar<T>.Zero);

    /// <summary>Adds two matrices together.</summary>
    /// <param name="value1">The first source matrix.</param>
    /// <param name="value2">The second source matrix.</param>
    /// <returns>The resulting matrix.</returns>
    public static unsafe Matrix2X2<T> operator +(Matrix2X2<T> value1, Matrix2X2<T> value2)
    {
        Matrix2X2<T> m;

        m.Row1 = value1.Row1 + value2.Row1;
        m.Row2 = value1.Row2 + value2.Row2;

        return m;
    }

    /// <summary>Returns a boolean indicating whether the given two matrices are equal.</summary>
    /// <param name="value1">The first matrix to compare.</param>
    /// <param name="value2">The second matrix to compare.</param>
    /// <returns>True if the given matrices are equal; False otherwise.</returns>
    public static unsafe bool operator ==(Matrix2X2<T> value1, Matrix2X2<T> value2)
    {
        return Scalar.Equal(value1.M11, value2.M11) && Scalar.Equal(value1.M22, value2.M22) &&
                // Check diagonal elements first for early out.
                Scalar.Equal(value1.M12, value2.M12) && Scalar.Equal(value1.M21, value2.M21);
    }

    /// <summary>Returns a boolean indicating whether the given two matrices are not equal.</summary>
    /// <param name="value1">The first matrix to compare.</param>
    /// <param name="value2">The second matrix to compare.</param>
    /// <returns>True if the given matrices are not equal; False if they are equal.</returns>
    public static unsafe bool operator !=(Matrix2X2<T> value1, Matrix2X2<T> value2)
    {
        return Scalar.NotEqual(value1.M11, value2.M11) ||
                Scalar.NotEqual(value1.M22, value2.M22) || // Check diagonal elements first for early out.
                Scalar.NotEqual(value1.M12, value2.M12) || Scalar.NotEqual(value1.M21, value2.M21);
    }

    /// <summary>Multiplies a matrix by another matrix.</summary>
    /// <param name="value1">The first source matrix.</param>
    /// <param name="value2">The second source matrix.</param>
    /// <returns>The result of the multiplication.</returns>
    public static unsafe Matrix2X2<T> operator *(Matrix2X2<T> value1, Matrix2X2<T> value2)
    {
        return new
        (
            value1.M11 * value2.Row1 + value1.M12 * value2.Row2, value1.M21 * value2.Row1 + value1.M22 * value2.Row2
        );
    }

    /// <summary>Multiplies a vector by a matrix.</summary>
    /// <param name="value1">The vector.</param>
    /// <param name="value2">The matrix.</param>
    /// <returns>The result of the multiplication.</returns>
    public static unsafe Vector2D<T> operator *(Vector2D<T> value1, Matrix2X2<T> value2)
    {
        return value1 * value2.Row1 + value1 * value2.Row2;
    }

    /// <summary>Multiplies a matrix by a scalar value.</summary>
    /// <param name="value1">The source matrix.</param>
    /// <param name="value2">The scaling factor.</param>
    /// <returns>The scaled matrix.</returns>
    public static unsafe Matrix2X2<T> operator *(Matrix2X2<T> value1, T value2)
    {
        return new(value1.Row1 * value2, value1.Row2 * value2);
    }

    /// <summary>Subtracts the second matrix from the first.</summary>
    /// <param name="value1">The first source matrix.</param>
    /// <param name="value2">The second source matrix.</param>
    /// <returns>The result of the subtraction.</returns>
    public static unsafe Matrix2X2<T> operator -(Matrix2X2<T> value1, Matrix2X2<T> value2)
    {
        return new(value1.Row1 - value2.Row1, value1.Row2 - value2.Row2);
    }

    /// <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
    /// <param name="value">The source matrix.</param>
    /// <returns>The negated matrix.</returns>
    public static unsafe Matrix2X2<T> operator -(Matrix2X2<T> value)
    {
        return new(-value.Row1, -value.Row2);
    }

    /// <summary>Calculates the determinant of the matrix.</summary>
    /// <returns>The determinant of the matrix.</returns>
    public readonly T GetDeterminant()
    {
        //   | a b |
        //   | c d | = ad - bc

        T a = M11, b = M12;
        T d = M21, c = M22;

        return Scalar.Subtract(Scalar.Multiply(a, d), Scalar.Multiply(b, c));
    }

    /// <summary>Returns a boolean indicating whether the given Object is equal to this matrix instance.</summary>
    /// <param name="obj">The Object to compare against.</param>
    /// <returns>True if the Object is equal to this matrix; False otherwise.</returns>
    [MethodImpl((MethodImplOptions) 768)]
    public override readonly bool Equals(object? obj) => (obj is Matrix2X2<T> other) && Equals(other);

    /// <summary>Returns a boolean indicating whether this matrix instance is equal to the other given matrix.</summary>
    /// <param name="other">The matrix to compare this instance to.</param>
    /// <returns>True if the matrices are equal; False otherwise.</returns>
    public readonly bool Equals(Matrix2X2<T> other) => this == other;

    /// <summary>Returns the hash code for this instance.</summary>
    /// <returns>The hash code.</returns>
    public override readonly int GetHashCode()
    {
        HashCode hash = default;

        hash.Add(M11);
        hash.Add(M12);

        hash.Add(M21);
        hash.Add(M22);

        return hash.ToHashCode();
    }

    /// <summary>Returns a String representing this matrix instance.</summary>
    /// <returns>The string representation.</returns>
    public override readonly string ToString()
    {
        return string.Format(CultureInfo.CurrentCulture, "{{ {{M11:{0} M12:{1}}} {{M21:{2} M22:{3}}} }}", M11, M12,
            M21, M22);
    }

    /// <summary>
    /// Converts a <see cref="Matrix2X2{T}"/> into one with a <typeparamref name="T"/> of <see cref="Half"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="Half"/> matrix</returns>
    public static explicit operator Matrix2X2<Half>(Matrix2X2<T> from)
        => new(Scalar.As<T, Half>(from.M11), Scalar.As<T, Half>(from.M12), Scalar.As<T, Half>(from.M21),
            Scalar.As<T, Half>(from.M22));

    /// <summary>
    /// Converts a <see cref="Matrix2X2{T}"/> into one with a <typeparamref name="T"/> of <see cref="float"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="float"/> matrix</returns>
    public static explicit operator Matrix2X2<float>(Matrix2X2<T> from)
        => new(Scalar.As<T, float>(from.M11), Scalar.As<T, float>(from.M12),
            Scalar.As<T, float>(from.M21), Scalar.As<T, float>(from.M22));

    /// <summary>
    /// Converts a <see cref="Matrix2X2{T}"/> into one with a <typeparamref name="T"/> of <see cref="double"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="double"/> matrix</returns>
    public static explicit operator Matrix2X2<double>(Matrix2X2<T> from)
        => new(Scalar.As<T, double>(from.M11), Scalar.As<T, double>(from.M12),
            Scalar.As<T, double>(from.M21), Scalar.As<T, double>(from.M22));

    /// <summary>
    /// Converts a <see cref="Matrix2X2{T}"/> into one with a <typeparamref name="T"/> of <see cref="decimal"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="decimal"/> matrix</returns>
    public static explicit operator Matrix2X2<decimal>(Matrix2X2<T> from)
        => new(Scalar.As<T, decimal>(from.M11), Scalar.As<T, decimal>(from.M12),
            Scalar.As<T, decimal>(from.M21), Scalar.As<T, decimal>(from.M22));

    /// <summary>
    /// Converts a <see cref="Matrix2X2{T}"/> into one with a <typeparamref name="T"/> of <see cref="sbyte"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="sbyte"/> matrix</returns>
    public static explicit operator Matrix2X2<sbyte>(Matrix2X2<T> from)
        => new(Scalar.As<T, sbyte>(from.M11), Scalar.As<T, sbyte>(from.M12),
            Scalar.As<T, sbyte>(from.M21), Scalar.As<T, sbyte>(from.M22));

    /// <summary>
    /// Converts a <see cref="Matrix2X2{T}"/> into one with a <typeparamref name="T"/> of <see cref="byte"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="byte"/> matrix</returns>
    public static explicit operator Matrix2X2<byte>(Matrix2X2<T> from)
        => new(Scalar.As<T, byte>(from.M11), Scalar.As<T, byte>(from.M12), Scalar.As<T, byte>(from.M21),
            Scalar.As<T, byte>(from.M22));

    /// <summary>
    /// Converts a <see cref="Matrix2X2{T}"/> into one with a <typeparamref name="T"/> of <see cref="ushort"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="ushort"/> matrix</returns>
    public static explicit operator Matrix2X2<ushort>(Matrix2X2<T> from)
        => new(Scalar.As<T, ushort>(from.M11), Scalar.As<T, ushort>(from.M12),
            Scalar.As<T, ushort>(from.M21), Scalar.As<T, ushort>(from.M22));

    /// <summary>
    /// Converts a <see cref="Matrix2X2{T}"/> into one with a <typeparamref name="T"/> of <see cref="short"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="short"/> matrix</returns>
    public static explicit operator Matrix2X2<short>(Matrix2X2<T> from)
        => new(Scalar.As<T, short>(from.M11), Scalar.As<T, short>(from.M12),
            Scalar.As<T, short>(from.M21), Scalar.As<T, short>(from.M22));

    /// <summary>
    /// Converts a <see cref="Matrix2X2{T}"/> into one with a <typeparamref name="T"/> of <see cref="uint"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="uint"/> matrix</returns>
    public static explicit operator Matrix2X2<uint>(Matrix2X2<T> from)
        => new(Scalar.As<T, uint>(from.M11), Scalar.As<T, uint>(from.M12), Scalar.As<T, uint>(from.M21),
            Scalar.As<T, uint>(from.M22));

    /// <summary>
    /// Converts a <see cref="Matrix2X2{T}"/> into one with a <typeparamref name="T"/> of <see cref="int"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="int"/> matrix</returns>
    public static explicit operator Matrix2X2<int>(Matrix2X2<T> from)
        => new(Scalar.As<T, int>(from.M11), Scalar.As<T, int>(from.M12), Scalar.As<T, int>(from.M21),
            Scalar.As<T, int>(from.M22));

    /// <summary>
    /// Converts a <see cref="Matrix2X2{T}"/> into one with a <typeparamref name="T"/> of <see cref="ulong"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="ulong"/> matrix</returns>
    public static explicit operator Matrix2X2<ulong>(Matrix2X2<T> from)
        => new(Scalar.As<T, ulong>(from.M11), Scalar.As<T, ulong>(from.M12),
            Scalar.As<T, ulong>(from.M21), Scalar.As<T, ulong>(from.M22));

    /// <summary>
    /// Converts a <see cref="Matrix2X2{T}"/> into one with a <typeparamref name="T"/> of <see cref="long"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="long"/> matrix</returns>
    public static explicit operator Matrix2X2<long>(Matrix2X2<T> from)
        => new(Scalar.As<T, long>(from.M11), Scalar.As<T, long>(from.M12), Scalar.As<T, long>(from.M21),
            Scalar.As<T, long>(from.M22));

    /// <summary>
    /// Returns this matrix casted to <typeparamref name="TOther"></typeparamref>
    /// </summary>
    /// <typeparam name="TOther">The type to cast to</typeparam>
    /// <returns>The casted matrix</returns>
    public Matrix2X2<TOther> As<TOther>() where TOther : unmanaged, IFormattable, IEquatable<TOther>, IComparable<TOther>
    {
        return new(Row1.As<TOther>(), Row2.As<TOther>());
    }
}