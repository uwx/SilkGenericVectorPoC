{{~
load_file '_IncludeVector.scriban-cs'
~}}

using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;

namespace GenericVector.Experimental;

public static class {{ Vector }}
{
    {{~ ScalarConstraint = 'IBinaryFloatingPointIeee754<TScalar>' ~}}

    {{ include 'Vector_n_shared_static.scriban-cs' }}

    // Float-specific stuff
    /// <summary>Returns the length of this vector object.</summary>
    /// <returns>The vector's length.</returns>
    /// <altmember cref="LengthSquared{TScalar}"/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TScalar Length<TScalar>(this {{ VectorT }} vec) where TScalar : IBinaryFloatingPointIeee754<TScalar>
    {
        var lengthSquared = vec.LengthSquared();
        return TScalar.Sqrt(lengthSquared);
    }

    /// <summary>Computes the Euclidean distance between the two given points.</summary>
    /// <param name="value1">The first point.</param>
    /// <param name="value2">The second point.</param>
    /// <returns>The distance.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TScalar Distance<TScalar>({{ VectorT }} value1, {{ VectorT }} value2) where TScalar : IBinaryFloatingPointIeee754<TScalar>
    {
        var distanceSquared = DistanceSquared(value1, value2);
        return TScalar.Sqrt(distanceSquared);
    }

    /// <summary>Performs a linear interpolation between two vectors based on the given weighting.</summary>
    /// <param name="value1">The first vector.</param>
    /// <param name="value2">The second vector.</param>
    /// <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="value2" />.</param>
    /// <returns>The interpolated vector.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {{ VectorT }} Lerp<TScalar>({{ VectorT }} value1, {{ VectorT }} value2, TScalar amount) where TScalar : IBinaryFloatingPointIeee754<TScalar>
    {
        return (value1 * (TScalar.One - amount)) + (value2 * amount);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static {{ VectorT }} LerpUnchecked<TScalar>({{ VectorT }} value1, {{ VectorT }} value2, TScalar amount) where TScalar : IBinaryFloatingPointIeee754<TScalar>
    {
        return (value1 * (TScalar.One - amount)) + (value2 * amount);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {{ VectorT }} LerpClamped<TScalar>({{ VectorT }} value1, {{ VectorT }} value2, TScalar amount) where TScalar : IBinaryFloatingPointIeee754<TScalar>
    {
        amount = TScalar.Clamp(amount, TScalar.Zero, TScalar.One);
        return Lerp(value1, value2, amount);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static {{ VectorT }} LerpClampedUnchecked<TScalar>({{ VectorT }} value1, {{ VectorT }} value2, TScalar amount) where TScalar : IBinaryFloatingPointIeee754<TScalar>
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static TScalar ClampT(TScalar value, TScalar min, TScalar max)
        {
            return TScalar.MaxMagnitude(TScalar.MaxMagnitude(value, min), max);
        }

        amount = ClampT(amount, TScalar.Zero, TScalar.One);
        return LerpUnchecked(value1, value2, amount);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {{ VectorT }} Lerp<TScalar>({{ VectorT }} value1, {{ VectorT }} value2, {{ VectorT }} amount) where TScalar : IBinaryFloatingPointIeee754<TScalar>
    {
        return (value1 * ({{ VectorT }}.One - amount)) + (value2 * amount);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static {{ VectorT }} LerpUnchecked<TScalar>({{ VectorT }} value1, {{ VectorT }} value2, {{ VectorT }} amount) where TScalar : IBinaryFloatingPointIeee754<TScalar>
    {
        return (value1 * ({{ VectorT }}.One - amount)) + (value2 * amount);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {{ VectorT }} LerpClamped<TScalar>({{ VectorT }} value1, {{ VectorT }} value2, {{ VectorT }} amount) where TScalar : IBinaryFloatingPointIeee754<TScalar>
    {
        amount = Clamp(amount, {{ VectorT }}.Zero, {{ VectorT }}.One);
        return Lerp(value1, value2, amount);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static {{ VectorT }} LerpClampedUnchecked<TScalar>({{ VectorT }} value1, {{ VectorT }} value2, {{ VectorT }} amount) where TScalar : IBinaryFloatingPointIeee754<TScalar>
    {
        amount = Clamp(amount, {{ VectorT }}.Zero, {{ VectorT }}.One);
        return LerpUnchecked(value1, value2, amount);
    }

    /// <summary>Returns a vector with the same direction as the specified vector, but with a length of one.</summary>
    /// <param name="value">The vector to normalize.</param>
    /// <returns>The normalized vector.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {{ VectorT }} Normalize<TScalar>({{ VectorT }} value) where TScalar : IBinaryFloatingPointIeee754<TScalar>
    {
        return value / value.Length();
    }

    /// <summary>Returns the reflection of a vector off a surface that has the specified normal.</summary>
    /// <param name="vector">The source vector.</param>
    /// <param name="normal">The normal of the surface being reflected off.</param>
    /// <returns>The reflected vector.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {{ VectorT }} Reflect<TScalar>({{ VectorT }} vector, {{ VectorT }} normal) where TScalar : IBinaryFloatingPointIeee754<TScalar>
    {
        var dot = Dot(vector, normal);
        return vector - (Scalar<TScalar>.Two * (dot * normal));
    }

    /// <summary>Returns a vector whose elements are the square root of each of a specified vector's elements.</summary>
    /// <param name="value">A vector.</param>
    /// <returns>The square root vector.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static {{ VectorT }} Sqrt<TScalar>({{ VectorT }} value) where TScalar : IBinaryFloatingPointIeee754<TScalar>
    {
        return new {{ VectorT }}(
            TScalar.Sqrt(value.X),
            TScalar.Sqrt(value.Y)
        );
    }

    // Even more float-specific stuff
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Acosh<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Acosh(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Asinh<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Asinh(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Atanh<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Atanh(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Cosh<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Cosh(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Sinh<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Sinh(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Tanh<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Tanh(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Acos<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Acos(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} AcosPi<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.AcosPi(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Asin<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Asin(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} AsinPi<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.AsinPi(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Atan<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Atan(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} AtanPi<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.AtanPi(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Cos<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Cos(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} CosPi<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.CosPi(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} DegreesToRadians<TScalar>({{ VectorT }} degrees) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.DegreesToRadians(degrees.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} RadiansToDegrees<TScalar>({{ VectorT }} radians) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.RadiansToDegrees(radians.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Sin<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Sin(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} SinPi<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.SinPi(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Tan<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Tan(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} TanPi<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.TanPi(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static ({{ VectorT }} Sin, {{ VectorT }} Cos) SinCos<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => (
        new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Sin(x.{c})"; end }}),
        new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Cos(x.{c})"; end }})
    );
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static ({{ VectorT }} SinPi, {{ VectorT }} CosPi) SinCosPi<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => (
        new({{ wrap forEachDimension ', ' newline:false; $"TScalar.SinPi(x.{c})"; end }}),
        new({{ wrap forEachDimension ', ' newline:false; $"TScalar.CosPi(x.{c})"; end }})
    );
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Log<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Log(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Log<TScalar>({{ VectorT }} x, {{ VectorT }} newBase) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Log(x.{c}, newBase.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Log<TScalar>({{ VectorT }} x, TScalar newBase) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Log(x.{c}, newBase)"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} LogP1<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.LogP1(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] private static TScalar Log2ILogarithmicFunctions<TScalar>(TScalar x) where TScalar : ILogarithmicFunctions<TScalar> => TScalar.Log2(x);
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Log2<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"Log2ILogarithmicFunctions(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Log2P1<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Log2P1(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Log10<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Log10(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Log10P1<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Log10P1(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Exp<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Exp(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} ExpM1<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.ExpM1(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Exp2<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Exp2(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Exp2M1<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Exp2M1(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Exp10<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Exp10(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Exp10M1<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Exp10M1(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Pow<TScalar>({{ VectorT }} x, {{ VectorT }} y) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Pow(x.{c}, y.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Pow<TScalar>({{ VectorT }} x, TScalar y) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Pow(x.{c}, y)"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Cbrt<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Cbrt(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Hypot<TScalar>({{ VectorT }} x, {{ VectorT }} y) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Hypot(x.{c}, y.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Hypot<TScalar>({{ VectorT }} x, TScalar y) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Hypot(x.{c}, y)"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} RootN<TScalar>({{ VectorT }} x, int n) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.RootN(x.{c}, n)"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Round<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Round(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Round<TScalar>({{ VectorT }} x, int digits) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Round(x.{c}, digits)"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Round<TScalar>({{ VectorT }} x, MidpointRounding mode) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Round(x.{c}, mode)"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Round<TScalar>({{ VectorT }} x, int digits, MidpointRounding mode) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Round(x.{c}, digits, mode)"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Truncate<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Truncate(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Atan2<TScalar>({{ VectorT }} x, {{ VectorT }} y) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Atan2(x.{c}, y.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Atan2Pi<TScalar>({{ VectorT }} x, {{ VectorT }} y) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Atan2Pi(x.{c}, y.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Atan2<TScalar>({{ VectorT }} x, TScalar y) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Atan2(x.{c}, y)"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} Atan2Pi<TScalar>({{ VectorT }} x, TScalar y) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.Atan2Pi(x.{c}, y)"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} BitDecrement<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.BitDecrement(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} BitIncrement<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.BitIncrement(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} FusedMultiplyAdd<TScalar>({{ VectorT }} left, {{ VectorT }} right, {{ VectorT }} addend) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.FusedMultiplyAdd(left.{c}, right.{c}, addend.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} ReciprocalEstimate<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.ReciprocalEstimate(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} ReciprocalSqrtEstimate<TScalar>({{ VectorT }} x) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.ReciprocalSqrtEstimate(x.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} ScaleB<TScalar>({{ VectorT }} x, Vector2D<int> n) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.ScaleB(x.{c}, n.{c})"; end }});
    [MethodImpl(MethodImplOptions.AggressiveInlining)] public static {{ VectorT }} ScaleB<TScalar>({{ VectorT }} x, int n) where TScalar : IBinaryFloatingPointIeee754<TScalar> => new({{ wrap forEachDimension ', ' newline:false; $"TScalar.ScaleB(x.{c}, n)"; end }});
}