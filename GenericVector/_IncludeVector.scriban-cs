{{
    # inputs
    # element_count = the number of components in the vector being generated
    # min_dimensions = the minimum dimension of vector that will be generated at all in this or other vectors
    # max_dimensions = the maximum dimension of vector that will be generated at all in this or other vectors

    # convenience for array indexing
    dimension_idx = element_count - 1

    # max dimension between this and the System.Numerics supported ones
    max_numeric_dimensions = max_dimensions < 4 ? max_dimensions : 4

    # string helpers
    Vector = $"Vector{element_count}i"
    VectorT = Vector + '<TScalar>'
    VectorXml = Vector + '{TScalar}'

    xyzw = ["X", "Y", "Z", "W", "V"]
    xyzw_lower = xyzw | array.each @string.downcase
    parameters = xyzw_lower | array.each do; ret $"TScalar {$0}"; end

    amount_name = "fuck"
    case element_count
        when 1
            amount_name = "one"
        when 2
            amount_name = "two"
        when 3
            amount_name = "three"
        when 4
            amount_name = "four"
        when 5
            amount_name = "five"
    end

    # takes all dimensions and returns an array with each entry having a prefix, suffix and downcased if desired
    func xyzwFormat(prefix = '', suffix = '', downcase = false)
        ret 0..<max_dimensions | array.each do; (prefix + (downcase ? (xyzw[$0] | string.downcase) : xyzw[$0]) + suffix); end
    end

    # use wrap
    # local variables are c and cl
    func forEachDimension(sep = null, newline = true, endingNewline = false, dimensionLimit = null, dimensionOffset = null)
        dimensionLimit = (dimensionLimit ?? element_count) - 1
        dimensionOffset = dimensionOffset ?? 0
        for x in dimensionOffset..dimensionLimit
            c = xyzw[x]
            cl = c | string.downcase
            $$
            if !for.last && sep != null
                sep
            end
            if newline && (endingNewline || !for.last)
                '\n'
            end
        end
    end

    # like slicing in js
    func slice(value, indexStart = 0, indexEnd = null)
        len = object.size value

        indexEnd = indexEnd ?? len

        # If indexStart >= str.length, an empty string is returned.
        # If indexStart < 0, the index is counted from the end of the string. More formally, in this case, the substring starts at max(indexStart + str.length, 0).
        # If indexStart is omitted, undefined, or cannot be converted to a number, it's treated as 0.
        # If indexEnd is omitted, undefined, or cannot be converted to a number, or if indexEnd >= str.length, slice() extracts to the end of the string.
        # If indexEnd < 0, the index is counted from the end of the string. More formally, in this case, the substring ends at max(indexEnd + str.length, 0).
        # If indexEnd <= indexStart after normalizing negative values (i.e. indexEnd represents a character that's before indexStart), an empty string is returned.

        if indexStart < 0
            indexStart = max (indexStart + len) 0
        end

        if indexEnd < 0
            indexEnd = max (indexEnd + len) 0
        end

        case object.typeof value
            when 'string'
                if indexStart >= len || indexEnd <= indexStart
                    ret ''
                end

                ret value | string.slice indexStart (indexEnd - indexStart)
            when 'boolean'
                ret value
            when 'number'
                ret value
            when 'array'
                if indexStart >= len || indexEnd <= indexStart
                    ret []
                end

                ret value | array.limit indexEnd | array.offset indexStart
            when 'iterator'
                if indexStart >= len || indexEnd <= indexStart
                    ret []
                end

                ret value | array.limit indexEnd | array.offset indexStart
            when 'object'
                ret value
            else
                ret value
        end
    end
}}