using System.Collections;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Serialization;
using System.Text.Unicode;

namespace GenericVector;

{{
#rows
#columns

    TypeName = $"Matrix{rows}X{columns}"
    TypeNameT = TypeName + '<T>'
    DocName = TypeName + '{T}'

    xyzw = ["X", "Y", "Z", "W"]

    RowsNameT = $"Vector{rows}D<T>"
    ColumnsNameT = $"Vector{columns}D<T>"

    func forEachRowAndColumn(sep = null, newline = true, endingNewline = false)
        for x in 0..<rows
            row = x+1
            c = xyzw[x]
            cl = c | string.downcase
            for y in 0..<columns
                column = y+1
                $$
                if !for.last && sep != null
                    sep
                end
                if newline && (endingNewline || !for.last)
                    '\n'
                end
            end
        end
    end

    func forEachRow(sep = null, newline = true, endingNewline = false)
        for x in 0..<rows
            row = x+1
            c = xyzw[x]
            cl = c | string.downcase
            $$
            if !for.last && sep != null
                sep
            end
            if newline && (endingNewline || !for.last)
                '\n'
            end
        end
    end

    func forEachColumn(sep = null, newline = true, endingNewline = false)
        for y in 0..<columns
            column = y+1
            c = xyzw[y]
            cl = c | string.downcase
            $$
            if !for.last && sep != null
                sep
            end
            if newline && (endingNewline || !for.last)
                '\n'
            end
        end
    end
}}
/// <summary>A structure encapsulating a {rows}x{columns matrix.</summary>
[Serializable, DataContract]
public readonly struct {{TypeNameT}} : IEquatable<{{TypeNameT}}>
    where T : INumberBase<T>
{
    {{~ for x in 0..<rows ~}}
    /// <summary>
    /// Row {{x+1}} of the matrix.
    /// </summary>
    [IgnoreDataMember]
    public readonly {{RowsNameT}} Row{{x+1}};
    {{~ end ~}}

    {{~ for x in 0..<rows ~}}
    /// <summary>
    /// Row {{x+1}} of the matrix.
    /// </summary>
    [IgnoreDataMember]
    public {{RowsNameT}} {{xyzw[x]}} => Row{{x+1}};
    {{~ end ~}}

    {{~ for y in 0..<columns ~}}
    /// <summary>
    /// Column {{y+1}} of the matrix.
    /// </summary>
    [IgnoreDataMember]
    public {{ColumnsNameT}} Column{{y+1}} => new(
        {{- for x in 0..<rows -}}
        M{{x+1}}{{y+1}} {{- if !for.last -}}, {{ end -}}
        {{- end -}}
    );
    {{~ end ~}}

    {{~ for x in 0..<rows ~}}
    {{~ for y in 0..<columns ~}}
    /// <summary>Value at row {{x+1}}, column {{y+1}} of the matrix.</summary>
    [DataMember]
    public T M{{x+1}}{{y+1}} => Row{{x+1}}.{{xyzw[y]}};
    {{~ end ~}}
    {{~ end ~}}

    internal const int RowCount = {{rows}};
    internal const int ColumnCount = {{columns}};

    public ReadOnlySpan<{{RowsNameT}}> Rows
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => MemoryMarshal.CreateReadOnlySpan<{{RowsNameT}}>(ref Unsafe.AsRef(in Row1), RowCount);
    }

    /// <summary>
    /// Indexer for the rows of this matrix.
    /// </summary>
    /// <param name="x">The row to select. Zero based.</param>
    public unsafe {{RowsNameT}} this[int x]
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => Rows[x];
    }

    /// <summary>
    /// Indexer for the cells in this matrix.
    /// </summary>
    /// <param name="x">The row to select. Zero based.</param>
    /// <param name="y">The column to select. Zero based.</param>
    public unsafe T this[int x, int y] => this[x][y];

    /// <summary>Constructs a <see cref="{{DocName}}"/> from the given components.</summary>
    public {{TypeName}}({{ wrap forEachRowAndColumn ', ' newline:false; $"T m{x}{y}"; end }})
    {
        {{~ for y in 0..<columns ~}}
        Row{{x+1}} = new(
            {{- wrap forEachColumn newline:false ', '; $"m{x+1}{column}"; end -}}
        );
        {{~ end ~}}
    }

    /// <summary>Constructs a <see cref="{{ DocName }}"/> from the given rows.</summary>
    public {{TypeName}}({{ wrap forEachRow ', ' newline:false; $"{RowsNameT} row{row}"; end }})
    {
        {{ wrap forEachRow; $"Row{row} = row{row};"; end }}
    }

    {{~ for from_rows in rows..max_rows ~}}
    {{~ for from_columns in column..max_columns ~}}
    {{~
        if from_rows == rows && from_columns == columns
            continue
        end
    ~}}
    /// <summary>Constructs a <see cref="{{ DocName }}"/> from the given <see cref="Matrix3X2{T}"/>.</summary>
    /// <param name="value">The source <see cref="Matrix3X2{T}"/>.</param>
    public {{TypeName}}(Matrix{{from_rows}}X{{from_columns}}<T> value)
    {
        {{~ for y in 0..<columns ~}}
        Row{{x+1}} = new(
            {{- wrap forEachColumn newline:false ', '; $"m{x+1}{column}"; end -}}
        );
        {{~ end ~}}
    }
    {{~ end ~}}
    {{~ end ~}}

    /// <summary>Gets the multiplicative identity matrix.</summary>
    /// <value>Gets the multiplicative identity matrix.</value>
    public static Matrix4X4<T> Identity
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => new({{ wrap forEachRow; $"Vector{columns}D<T>.Unit{c}"; end }};
    }

    /// <summary>Returns whether the matrix is the identity matrix.</summary>
    public bool IsIdentity => this == Identity;

    /// <summary>Adds two matrices together.</summary>
    /// <param name="value1">The first source matrix.</param>
    /// <param name="value2">The second source matrix.</param>
    /// <returns>The resulting matrix.</returns>
    public static unsafe {{ TypeNameT }} operator +({{ TypeNameT }} value1, {{ TypeNameT }} value2)
    {
        return new {{ TypeNameT }}(
            {{ wrap forEachRow ','; $"value1.Row{row} + value2.Row{row}"; end }}
        )
    }

    /// <summary>Returns a boolean indicating whether the given two matrices are equal.</summary>
    /// <param name="value1">The first matrix to compare.</param>
    /// <param name="value2">The second matrix to compare.</param>
    /// <returns>True if the given matrices are equal; False otherwise.</returns>
    public static unsafe bool operator ==({{ TypeNameT }} value1, {{ TypeNameT }} value2)
    {
        return value1.Equals(value2);
    }

    /// <summary>Returns a boolean indicating whether the given two matrices are not equal.</summary>
    /// <param name="value1">The first matrix to compare.</param>
    /// <param name="value2">The second matrix to compare.</param>
    /// <returns>True if the given matrices are not equal; False if they are equal.</returns>
    public static unsafe bool operator !=({{ TypeNameT }} value1, {{ TypeNameT }} value2)
    {
        return !(value1 == value2);
    }

    /// <summary>Multiplies a matrix by a scalar value.</summary>
    /// <param name="value1">The source matrix.</param>
    /// <param name="value2">The scaling factor.</param>
    /// <returns>The scaled matrix.</returns>
    public static unsafe {{ TypeNameT }} operator *({{ TypeNameT }} value1, T value2)
    {
        return new(value1.Row1 * value2, value1.Row2 * value2, value1.Row3 * value2);
    }

    /// <summary>Subtracts the second matrix from the first.</summary>
    /// <param name="value1">The first source matrix.</param>
    /// <param name="value2">The second source matrix.</param>
    /// <returns>The result of the subtraction.</returns>
    public static unsafe {{ TypeNameT }} operator -({{ TypeNameT }} value1, {{ TypeNameT }} value2)
    {
        return new(value1.Row1 - value2.Row1, value1.Row2 - value2.Row2, value1.Row3 - value2.Row3);
    }

    /// <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
    /// <param name="value">The source matrix.</param>
    /// <returns>The negated matrix.</returns>
    public static unsafe {{ TypeNameT }} operator -({{ TypeNameT }} value)
    {
        return new(-value.Row1, -value.Row2, -value.Row3);
    }

    /// <summary>Returns a boolean indicating whether the given Object is equal to this matrix instance.</summary>
    /// <param name="obj">The Object to compare against.</param>
    /// <returns>True if the Object is equal to this matrix; False otherwise.</returns>
    [MethodImpl((MethodImplOptions) 768)]
    public override readonly bool Equals(object? obj)
        => (obj is {{ TypeNameT }} other) && Equals(other);

    /// <summary>Returns a boolean indicating whether this matrix instance is equal to the other given matrix.</summary>
    /// <param name="other">The matrix to compare this instance to.</param>
    /// <returns>True if the matrices are equal; False otherwise.</returns>
    public readonly bool Equals({{ TypeNameT }} other)
        => this == other;

    /// <summary>Returns the hash code for this instance.</summary>
    /// <returns>The hash code.</returns>
    public override readonly int GetHashCode()
    {
        HashCode hash = default;

        hash.Add(M11);
        hash.Add(M12);
        hash.Add(M13);
        hash.Add(M14);

        hash.Add(M21);
        hash.Add(M22);
        hash.Add(M23);
        hash.Add(M24);

        hash.Add(M31);
        hash.Add(M32);
        hash.Add(M33);
        hash.Add(M34);

        return hash.ToHashCode();
    }

    /// <summary>Returns a String representing this matrix instance.</summary>
    /// <returns>The string representation.</returns>
    public override readonly string ToString()
    {
        return string.Format(CultureInfo.CurrentCulture, {%{"{{ {{M11:{0} M12:{1} M13:{2} M14:{3}}} {{M21:{4} M22:{5} M23:{6} M24:{7}}} {{M31:{8} M32:{9} M33:{10} M34:{11}}} }}"}%},
                                M11, M12, M13, M14,
                                M21, M22, M23, M24,
                                M31, M32, M33, M34);
    }

    /// <summary>
    /// Converts a <see cref="Matrix3X4{T}"/> into one with a <typeparamref name="T"/> of <see cref="Half"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="Half"/> matrix</returns>
    public static explicit operator Matrix3X4<Half>({{ TypeNameT }} from)
        => new
        (
            Scalar.As<T, Half>(from.M11), Scalar.As<T, Half>(from.M12),
            Scalar.As<T, Half>(from.M13), Scalar.As<T, Half>(from.M14),
            Scalar.As<T, Half>(from.M21), Scalar.As<T, Half>(from.M22),
            Scalar.As<T, Half>(from.M23), Scalar.As<T, Half>(from.M24),
            Scalar.As<T, Half>(from.M31), Scalar.As<T, Half>(from.M32),
            Scalar.As<T, Half>(from.M33), Scalar.As<T, Half>(from.M34)
        );

    /// <summary>
    /// Converts a <see cref="Matrix3X4{T}"/> into one with a <typeparamref name="T"/> of <see cref="float"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="float"/> matrix</returns>
    public static explicit operator Matrix3X4<float>({{ TypeNameT }} from)
        => new
        (
            Scalar.As<T, float>(from.M11), Scalar.As<T, float>(from.M12),
            Scalar.As<T, float>(from.M13), Scalar.As<T, float>(from.M14),
            Scalar.As<T, float>(from.M21), Scalar.As<T, float>(from.M22),
            Scalar.As<T, float>(from.M23), Scalar.As<T, float>(from.M24),
            Scalar.As<T, float>(from.M31), Scalar.As<T, float>(from.M32),
            Scalar.As<T, float>(from.M33), Scalar.As<T, float>(from.M34)
        );

    /// <summary>
    /// Converts a <see cref="Matrix3X4{T}"/> into one with a <typeparamref name="T"/> of <see cref="double"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="double"/> matrix</returns>
    public static explicit operator Matrix3X4<double>({{ TypeNameT }} from)
        => new
        (
            Scalar.As<T, double>(from.M11), Scalar.As<T, double>(from.M12),
            Scalar.As<T, double>(from.M13), Scalar.As<T, double>(from.M14),
            Scalar.As<T, double>(from.M21), Scalar.As<T, double>(from.M22),
            Scalar.As<T, double>(from.M23), Scalar.As<T, double>(from.M24),
            Scalar.As<T, double>(from.M31), Scalar.As<T, double>(from.M32),
            Scalar.As<T, double>(from.M33), Scalar.As<T, double>(from.M34)
        );

    /// <summary>
    /// Converts a <see cref="Matrix3X4{T}"/> into one with a <typeparamref name="T"/> of <see cref="decimal"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="decimal"/> matrix</returns>
    public static explicit operator Matrix3X4<decimal>({{ TypeNameT }} from)
        => new
        (
            Scalar.As<T, decimal>(from.M11), Scalar.As<T, decimal>(from.M12),
            Scalar.As<T, decimal>(from.M13), Scalar.As<T, decimal>(from.M14),
            Scalar.As<T, decimal>(from.M21), Scalar.As<T, decimal>(from.M22),
            Scalar.As<T, decimal>(from.M23), Scalar.As<T, decimal>(from.M24),
            Scalar.As<T, decimal>(from.M31), Scalar.As<T, decimal>(from.M32),
            Scalar.As<T, decimal>(from.M33), Scalar.As<T, decimal>(from.M34)
        );

    /// <summary>
    /// Converts a <see cref="Matrix3X4{T}"/> into one with a <typeparamref name="T"/> of <see cref="sbyte"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="sbyte"/> matrix</returns>
    public static explicit operator Matrix3X4<sbyte>({{ TypeNameT }} from)
        => new
        (
            Scalar.As<T, sbyte>(from.M11), Scalar.As<T, sbyte>(from.M12),
            Scalar.As<T, sbyte>(from.M13), Scalar.As<T, sbyte>(from.M14),
            Scalar.As<T, sbyte>(from.M21), Scalar.As<T, sbyte>(from.M22),
            Scalar.As<T, sbyte>(from.M23), Scalar.As<T, sbyte>(from.M24),
            Scalar.As<T, sbyte>(from.M31), Scalar.As<T, sbyte>(from.M32),
            Scalar.As<T, sbyte>(from.M33), Scalar.As<T, sbyte>(from.M34)
        );

    /// <summary>
    /// Converts a <see cref="Matrix3X4{T}"/> into one with a <typeparamref name="T"/> of <see cref="byte"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="byte"/> matrix</returns>
    public static explicit operator Matrix3X4<byte>({{ TypeNameT }} from)
        => new
        (
            Scalar.As<T, byte>(from.M11), Scalar.As<T, byte>(from.M12),
            Scalar.As<T, byte>(from.M13), Scalar.As<T, byte>(from.M14),
            Scalar.As<T, byte>(from.M21), Scalar.As<T, byte>(from.M22),
            Scalar.As<T, byte>(from.M23), Scalar.As<T, byte>(from.M24),
            Scalar.As<T, byte>(from.M31), Scalar.As<T, byte>(from.M32),
            Scalar.As<T, byte>(from.M33), Scalar.As<T, byte>(from.M34)
        );

    /// <summary>
    /// Converts a <see cref="Matrix3X4{T}"/> into one with a <typeparamref name="T"/> of <see cref="ushort"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="ushort"/> matrix</returns>
    public static explicit operator Matrix3X4<ushort>({{ TypeNameT }} from)
        => new
        (
            Scalar.As<T, ushort>(from.M11), Scalar.As<T, ushort>(from.M12),
            Scalar.As<T, ushort>(from.M13), Scalar.As<T, ushort>(from.M14),
            Scalar.As<T, ushort>(from.M21), Scalar.As<T, ushort>(from.M22),
            Scalar.As<T, ushort>(from.M23), Scalar.As<T, ushort>(from.M24),
            Scalar.As<T, ushort>(from.M31), Scalar.As<T, ushort>(from.M32),
            Scalar.As<T, ushort>(from.M33), Scalar.As<T, ushort>(from.M34)
        );

    /// <summary>
    /// Converts a <see cref="Matrix3X4{T}"/> into one with a <typeparamref name="T"/> of <see cref="short"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="short"/> matrix</returns>
    public static explicit operator Matrix3X4<short>({{ TypeNameT }} from)
        => new
        (
            Scalar.As<T, short>(from.M11), Scalar.As<T, short>(from.M12),
            Scalar.As<T, short>(from.M13), Scalar.As<T, short>(from.M14),
            Scalar.As<T, short>(from.M21), Scalar.As<T, short>(from.M22),
            Scalar.As<T, short>(from.M23), Scalar.As<T, short>(from.M24),
            Scalar.As<T, short>(from.M31), Scalar.As<T, short>(from.M32),
            Scalar.As<T, short>(from.M33), Scalar.As<T, short>(from.M34)
        );

    /// <summary>
    /// Converts a <see cref="Matrix3X4{T}"/> into one with a <typeparamref name="T"/> of <see cref="uint"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="uint"/> matrix</returns>
    public static explicit operator Matrix3X4<uint>({{ TypeNameT }} from)
        => new
        (
            Scalar.As<T, uint>(from.M11), Scalar.As<T, uint>(from.M12),
            Scalar.As<T, uint>(from.M13), Scalar.As<T, uint>(from.M14),
            Scalar.As<T, uint>(from.M21), Scalar.As<T, uint>(from.M22),
            Scalar.As<T, uint>(from.M23), Scalar.As<T, uint>(from.M24),
            Scalar.As<T, uint>(from.M31), Scalar.As<T, uint>(from.M32),
            Scalar.As<T, uint>(from.M33), Scalar.As<T, uint>(from.M34)
        );

    /// <summary>
    /// Converts a <see cref="Matrix3X4{T}"/> into one with a <typeparamref name="T"/> of <see cref="int"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="int"/> matrix</returns>
    public static explicit operator Matrix3X4<int>({{ TypeNameT }} from)
        => new
        (
            Scalar.As<T, int>(from.M11), Scalar.As<T, int>(from.M12),
            Scalar.As<T, int>(from.M13), Scalar.As<T, int>(from.M14),
            Scalar.As<T, int>(from.M21), Scalar.As<T, int>(from.M22),
            Scalar.As<T, int>(from.M23), Scalar.As<T, int>(from.M24),
            Scalar.As<T, int>(from.M31), Scalar.As<T, int>(from.M32),
            Scalar.As<T, int>(from.M33), Scalar.As<T, int>(from.M34)
        );

    /// <summary>
    /// Converts a <see cref="Matrix3X4{T}"/> into one with a <typeparamref name="T"/> of <see cref="ulong"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="ulong"/> matrix</returns>
    public static explicit operator Matrix3X4<ulong>({{ TypeNameT }} from)
        => new
        (
            Scalar.As<T, ulong>(from.M11), Scalar.As<T, ulong>(from.M12),
            Scalar.As<T, ulong>(from.M13), Scalar.As<T, ulong>(from.M14),
            Scalar.As<T, ulong>(from.M21), Scalar.As<T, ulong>(from.M22),
            Scalar.As<T, ulong>(from.M23), Scalar.As<T, ulong>(from.M24),
            Scalar.As<T, ulong>(from.M31), Scalar.As<T, ulong>(from.M32),
            Scalar.As<T, ulong>(from.M33), Scalar.As<T, ulong>(from.M34)
        );

    /// <summary>
    /// Converts a <see cref="Matrix3X4{T}"/> into one with a <typeparamref name="T"/> of <see cref="long"/>
    /// </summary>
    /// <param name="from">The source matrix</param>
    /// <returns>The <see cref="long"/> matrix</returns>
    public static explicit operator Matrix3X4<long>({{ TypeNameT }} from)
        => new
        (
            Scalar.As<T, long>(from.M11), Scalar.As<T, long>(from.M12),
            Scalar.As<T, long>(from.M13), Scalar.As<T, long>(from.M14),
            Scalar.As<T, long>(from.M21), Scalar.As<T, long>(from.M22),
            Scalar.As<T, long>(from.M23), Scalar.As<T, long>(from.M24),
            Scalar.As<T, long>(from.M31), Scalar.As<T, long>(from.M32),
            Scalar.As<T, long>(from.M33), Scalar.As<T, long>(from.M34)
        );

    /// <summary>
    /// Returns this matrix casted to <typeparamref name="TOther"></typeparamref>
    /// </summary>
    /// <typeparam name="TOther">The type to cast to</typeparam>
    /// <returns>The casted matrix</returns>
    public Matrix3X4<TOther> As<TOther>() where TOther : unmanaged, IFormattable, IEquatable<TOther>, IComparable<TOther>
    {
        return new(Row1.As<TOther>(), Row2.As<TOther>(), Row3.As<TOther>());
    }
}