{{
max_numeric_dimensions = max_dimensions < 4 ? max_dimensions : 4

vecN = vec_n
dimensionIndex = vecN - 1

TypeName = $"Vector{vecN}D"
TypeNameT = TypeName + '<T>'
DocName = TypeName + '{T}'

xyzw = ["X", "Y", "Z", "W", "V"]
ComponentsLower = xyzw | array.each @string.downcase
Parameters = ["T x", "T y", "T z", "T w", "T v"]
# ValueValue = [ "value.X", "value.Y", "value.Z", "value.W"]
AmountName = "fuck"
case vecN
    when 1
        AmountName = "one"
    when 2
        AmountName = "two"
    when 3
        AmountName = "three"
    when 4
        AmountName = "four"
    when 5
        AmountName = "five"
end

max(x, y) = x > y ? x : y
min(x, y) = x < y ? x : y

func slice(value, indexStart = 0, indexEnd = null)
    len = object.size value

    indexEnd = indexEnd ?? len

    # If indexStart >= str.length, an empty string is returned.
    # If indexStart < 0, the index is counted from the end of the string. More formally, in this case, the substring starts at max(indexStart + str.length, 0).
    # If indexStart is omitted, undefined, or cannot be converted to a number, it's treated as 0.
    # If indexEnd is omitted, undefined, or cannot be converted to a number, or if indexEnd >= str.length, slice() extracts to the end of the string.
    # If indexEnd < 0, the index is counted from the end of the string. More formally, in this case, the substring ends at max(indexEnd + str.length, 0).
    # If indexEnd <= indexStart after normalizing negative values (i.e. indexEnd represents a character that's before indexStart), an empty string is returned.

    if indexStart < 0
        indexStart = max (indexStart + len) 0
    end

    if indexEnd < 0
        indexEnd = max (indexEnd + len) 0
    end

    case object.typeof value
        when 'string'
            if indexStart >= len || indexEnd <= indexStart
                ret ''
            end

            ret value | string.slice indexStart (indexEnd - indexStart)
        when 'boolean'
            ret value
        when 'number'
            ret value
        when 'array'
            if indexStart >= len || indexEnd <= indexStart
                ret []
            end

            ret value | array.limit indexEnd | array.offset indexStart
        when 'iterator'
            ret value
        when 'object'
            ret value
        else
            ret value
    end
end

func valueValue(prefix, downcase = false)
    arr = []
    for x in 0..<max_dimensions
        arr = arr | array.add (prefix + (downcase ? (xyzw[x] | string.downcase) : xyzw[x]))
    end
    ret arr
end

func humanizeAnd(items)
    if items.size == 1
        ret items[0]
    end

    itemsRest = items | array.limit (items.size - 1)
    itemLast = items[items.size - 1]
    ret $"{itemsRest | array.join ', '} and {itemLast}"
end

func operation(x, left, op, right, connector)
    s = $"({left}.{xyzw[x]} {op} {right}.{xyzw[x]})"
    if x < vecN - 1
        s += connector
    end
    ret s
end

func complexOperation(x, left1, left2, op, right1, right2, connector)
    s = $"({left1}{xyzw[x]}{left2} {op} {right1}{xyzw[x]}{right2})"
    if x < vecN - 1
        s += connector
    end
    ret s
end

func repeatCall(method, parameter, x = null, sep = ', ', startOffset = 0)
    list = []
    for x in startOffset..<(x ?? vecN)
        list = list | array.add $"{method}({parameter}.{xyzw[x]})"
    end
    ret list | array.join sep
end

func repeatCall2(method, parameter, parameter2, x = null, sep = ', ', startOffset = 0)
    list = []
    for x in 0..<(x ?? vecN)
        list = list | array.add $"{method}({parameter}.{xyzw[x]}, {parameter2}.{xyzw[x]})"
    end
    ret list | array.join sep
end

func forEachDimension(sep = null, newline = true, endingNewline = false, dimensionLimit = null, dimensionOffset = null)
    dimensionLimit = (dimensionLimit ?? vecN) - 1
    dimensionOffset = dimensionOffset ?? 0
    for x in dimensionOffset..dimensionLimit
        c = xyzw[x]
        cl = c | string.downcase
        $$
        if !for.last && sep != null
            sep
        end
        if newline && (endingNewline || !for.last)
            '\n'
        end
    end
end

func vectorize(argNames...)
    a = 'v0'
    b = 'v1'
    c = 'v2'
    d = 'v3'
    e = 'v4'
    f = 'v5'
    g = 'v6'
    h = 'v7'
    i = 'v8'
    "// NOTE: COMPLETELY UNTESTED. MIGHT BE SLOW.\n"
    "unsafe\n"
    "{\n"
    "    if (Vector64<T>.IsSupported && Vector64.IsHardwareAccelerated)\n"
    "    {\n"
    for argName in argNames
        $"        Vector64<T> v{for.index} = default;\n"
    end
    "        \n"
    for argName in argNames
        $"        Unsafe.WriteUnaligned<{TypeNameT}>(ref Unsafe.As<Vector64<T>, byte>(ref v{for.index}), {argName});\n"
    end
    "        \n"
    "        v0 = "
    vector = 'Vector64'
    $$
    ";\n"
    $"        return Unsafe.ReadUnaligned<{TypeNameT}>(ref Unsafe.As<Vector64<T>, byte>(ref v0));\n"
    "    }\n"
    "\n"
    "    if (Vector128<T>.IsSupported && Vector128.IsHardwareAccelerated)\n"
    "    {\n"
    for argName in argNames
        $"        Vector128<T> v{for.index} = default;\n"
    end
    "        \n"
    for argName in argNames
        $"        Unsafe.WriteUnaligned<{TypeNameT}>(ref Unsafe.As<Vector128<T>, byte>(ref v{for.index}), {argName});\n"
    end
    "        \n"
    "        v0 = "
    vector = 'Vector128'
    $$
    ";\n"
    $"        return Unsafe.ReadUnaligned<{TypeNameT}>(ref Unsafe.As<Vector128<T>, byte>(ref v0));\n"
    "    }\n"
    "\n"
    "    if (Vector256<T>.IsSupported && Vector256.IsHardwareAccelerated)\n"
    "    {\n"
    for argName in argNames
        $"        Vector256<T> v{for.index} = default;\n"
    end
    "        \n"
    for argName in argNames
        $"        Unsafe.WriteUnaligned<{TypeNameT}>(ref Unsafe.As<Vector256<T>, byte>(ref v{for.index}), {argName});\n"
    end
    "        \n"
    "        v0 = "
    vector = 'Vector256'
    $$
    ";\n"
    $"        return Unsafe.ReadUnaligned<{TypeNameT}>(ref Unsafe.As<Vector256<T>, byte>(ref v0));\n"
    "    }\n"
    "\n"
    "    if (Vector512<T>.IsSupported && Vector512.IsHardwareAccelerated)\n"
    "    {\n"
    for argName in argNames
        $"        Vector512<T> v{for.index} = default;\n"
    end
    "        \n"
    for argName in argNames
        $"        Unsafe.WriteUnaligned<{TypeNameT}>(ref Unsafe.As<Vector512<T>, byte>(ref v{for.index}), {argName});\n"
    end
    "        \n"
    "        v0 = "
    vector = 'Vector512'
    $$
    ";\n"
    $"        return Unsafe.ReadUnaligned<{TypeNameT}>(ref Unsafe.As<Vector512<T>, byte>(ref v0));\n"
    "    }\n"
    "}\n"
end
}}